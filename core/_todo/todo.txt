- add git to composer php image
- cache docker builds in repository, based on md5 from files
- do a docker-compose build --no-cache for instances where docker files are changed
- remove 10000 port and find a way to run phpspec and stuff without installing it to the php container
- use specific version from docker and docker-compose inside rancheros

- overwrite default login location based on active docker machines and settings for project
- create plugin to directly ssh into docker-compose container
- persist shell history for all docker containers + vagrant machine?
- use rancheros
- "vagrant ssh php workspace/stagesol"
- add behat
- use nfs within rancheros
- use aufs within rancheros
- TODO remove phpunit and other tools from default php docker image, but create helper function for them

- workspace:up to only start a specific workspace
- make workspace:stagesol also work with dashes
- add a central docker loadbalancer for phpfpm 
	http://blog.hypriot.com/post/docker-compose-nodejs-haproxy/
- update the backend
- xdebug
- make the default vagrant yml the distribution file, create a config.yml from it
- php7
- put php modules in devmachine.yml
- look if there is a possibility to run phpcs without installing it in the main php container
- enable xdebug in devmachine.yml
- move ansible to docker container, to update timezone and stuff of all containers
- install docker simply with a shell script
- use ansible for stagesonline? 
- docker images on kuleuven repository
- move everything to docker containers, empty out vagrant shizzle
- php as alias for docker php - but make the alias behave so even the normal php can handle -- prefix (use another alias: doc-php for example)
- use composer scripts, instead of shell scripts

TODO site: extract template from index.php
TODO site: ping docker machines on index page with javascript, use colored icons
TODO site: add provisioning for devmachine workspace
TODO site: add vrana/adminer as composer project
TODO site: add logs page to show apache, php and docker logs in backend
TODO site: list workspaces with their corresponding url and port, and if they are reachable or not
TODO site: switch different environments, urls, ports, to reach certain page
TODO site: add javascript issue tracker in backend
TODO site: show latest docker report on home screen from devmachine
TODO site: report devmachine version, and if latest version was installed (git api?)

DONE vagrant: move composer to docker: http://marmelab.com/blog/2014/09/10/make-docker-command.html
DONE vagrant: rename docker-provision to provision-docker-compose.sh
DONE vagrant: use dos2unix to run shell script
DONE vagrant: install composer in the composer container, running the php version that gets linked to it?
DONE vagrant: put the vagrant defaults in a separate yml file in the vagrant directory
DONE vagrant: --provision-with system,workspace:stagesol
IGNORE vagrant: use vagrant docker provisioning
IGNORE vagrant: containers without a build.sh should have a .version file, to make sure they rebuild when anything changes in them
TODO vagrant: use trusty64 - http://www.vagrantbox.es/
TODO vagrant: use [devmachine][ip] or [devmachine][private_network] for [vm][network][private_network]
TODO vagrant: add [ssh][forward_agent] = true http://wildlyinaccurate.com/using-ssh-agent-forwarding-with-vagrant/
TODO vagrant: add "run: explicit" to use instead of always
TODO vagrant: add "embed: file", to embed workspace config from any file
TODO vagrant: add global disable scanning workspaces - and other behaviors
TODO vagrant: add overwriting name of devmachine.yml file - global and per workspace
TODO vagrant: make vagrant.yml an optional file
TODO vagrant: report devmachine version
TODO vagrant: enable/disable certain workspaces in config (but scan all if no config is available)
TODO vagrant: add provision inside project, so only that project gets scanned (including the whole containers and vagrant)
TODO vagrant: report only containers inside workspace if workspace is specified
TODO vagrant: add docker container checker to vagrant, so after vagrant up, workspaces that should be active become automatically active and stay active, when containers crash
TODO vagrant: report on all containers inside docker, combine docker-compose ps and docker ps -a in one big overview
TODO vagrant: automatically open url on host machine after provisioning
TODO vagrant: add virtualhosts files in project, and automagically add those to the server
TODO vagrant: check in provision.sh if vagrant is running and script runs in vagrant, otherwise start vagrant, and automagically run provisioning
TODO vagrant: add cleanup shell scripts to remove all files
TODO vagrant: add time loaded per container, and overall
TODO vagrant: use CoreOS container, with docker pre-installed
TODO vagrant: create a dhcp container, giving all the other containers a fixed internal ip address
TODO vagrant: ability to disable autoloading workspaces globally, or per workspace
TODO vagrant: say per project which config filename should be used
TODO vagrant: devmachine.yml filename should be an option
TODO vagrant: ability to either use devmachine.yml, ansible-playbook.yml or provision.sh
TODO vagrant: if provision.sh is detected, don't assume it should be running!!!
TODO vagrant: if disable: true, allow to run if asked for explicitly
TODO vagrant: if a devmachine.yml file is found, import it here, else it should be in the global config devmachine.yml inside the root
TODO vagrant: use /vagrant instead of /env - does this sync two way or not?
TODO vagrant: make it possible to use the nfs special options
TODO vagrant: for some commands, don't show the branding

TODO install specific docker version from source!!!
TODO -> https://docs.docker.com/project/set-up-dev-env/
TODO -> http://stackoverflow.com/questions/791959/download-a-specific-tag-with-git
TODO -> https://forums.docker.com/t/how-can-i-install-a-specific-version-of-the-docker-engine/1993
TODO docker: remove containers with images that don't exist anymore
TODO docker: check what docker is doing when using history or --all (in source code)
TODO docker: catch "error getting container" on docker-compose up, and retry
TODO docker: overwrite all sorts of config files from docker container
TODO docker: overwrite files inside docker by mimicking the docker container filesystem structure
TODO docker: use tagging system to upload build versions of containers, and use smart versioning system on docker container directory to create the tag, and keep it in the directory
TODO docker: add ssh container to access php, to directly ssh to app/console and/or xdebug
TODO docker: add auto-completion for docker: https://docs.docker.com/compose/completion/
TODO docker: rename common.yml to containers.yml
TODO docker: use an sql file to load during provisioning
TODO docker: install nginx, apache 2.2, hhvm, phpmyadmin, xdebug, git, openssl, node, npm, grunt, xhprof, memcache, redis, elasticsearch, apc, varnish, webgrind, closure
TODO docker: persist databases to a system data container
TODO docker: persist /var/lib/docker to a system data container
TODO docker: add php 5.6 and 7
TODO docker: add specific php.ini per project (use files with docker-compose config)
TODO docker: split common.yml into parts inside containers, as sort of default use case
TODO docker: add /env/mysql:/var/lib/mysql as volume outside the box
TODO docker: remove containers with images that don't exist anymore
TODO docker: add docker containers to report
TODO docker: only report on containers of workspace, if workspace is named with "report:devmachine"
TODO docker: WORK_DIR environment variable does not work! write test to check all environment variables!!!
TODO docker: add docker-compose path or filename
TODO docker: add switch:devmachine command, to halt all containers of other workspace, and avoid port conflicts

DONE ansible: move ansible.yml system config out of main directory, as it is system, not config
TODO ansible: add common.sh scripts to ansible as plugins
TODO ansible: split ansible file into roles
TODO ansible: use ansible to connect to docker-compose containers
TODO MAYBE ansible: install ansible on a docker machine, and connect from there to the other machines, including the vagrant box (use vagrant built in docker, use ansible to set specific version)

DONE apache: upgrade from apache 2.2 to apache 2.4 https://httpd.apache.org/docs/2.4/upgrading.html
TODO apache: provide an apache 2.2 container
TODO apache: add server aliases
TODO apache: add settings per project
TODO ErrorLog "|cat"
TODO LogFormat "%h %l %u %t \"%r\" %>s %b" common
TODO CustomLog "|cat" common
TODO add LockDir

DONE php: put the php-fpm config in the php-fpm docker directory, not in the lamp run file (add it with -c without newlines?)
DONE php: add php.ini settings (date.timezone, display_errors, error_reporting, session.save_path)
TODO php: use environment to name logs and log directory
TODO php: add php.ini variables through environment
TODO php: fpm is failing on multiple connections!!!!
TODO php: add magallanes globally in an other container
TODO php: install composer inside a separated container, running "on top" of the php container?

TODO LATER use rsync https://servercheck.in/blog/rsync-vagrant-15-file-performance-windows-dev
TODO LATER also update already installed programs

TODO CLEAN http://mywiki.wooledge.org/Bashism
TODO CHECK https://github.com/coreos/coreos-vagrant/blob/master/Vagrantfile



## Recreate database and add user
#echo -e "\e[33mRecreate database and add user\e[0m"
#docker run --link "$(docker inspect --format="{{.Name}}" "$(docker-compose ps -q "db")")":mysql --rm mysql sh -c 'exec mysql -v -v -v --host="$MYSQL_PORT_3306_TCP_ADDR" --port="$MYSQL_PORT_3306_TCP_PORT" --user="root" --password="$MYSQL_ENV_MYSQL_ROOT_PASSWORD" -e "SET FOREIGN_KEY_CHECKS = 0;" -e "DROP DATABASE IF EXISTS stagesol;" -e "SET FOREIGN_KEY_CHECKS = 1;" -e "CREATE DATABASE IF NOT EXISTS stagesol;" -e "GRANT ALL PRIVILEGES ON stagesol.* TO \"stagesol\"@\"%\" IDENTIFIED BY \"stagesol\";" -e "FLUSH PRIVILEGES;" -e "SHOW WARNINGS;"'

## Document mysqldump
# db prefix: docker run --link "$(docker inspect --format="{{.Name}}" "$(docker-compose ps -q "db")")":mysql --rm --volume /env/workspace/stagesol/dev/dump:/dump mysql sh
# export database: -c 'exec mysqldump --host="$MYSQL_PORT_3306_TCP_ADDR" --user="root" --password="$MYSQL_ENV_MYSQL_ROOT_PASSWORD" stagesol api__account > /dump/api__account.sql'
# import database: -c 'exec mysql --host="$MYSQL_PORT_3306_TCP_ADDR" --user="root" --password="$MYSQL_ENV_MYSQL_ROOT_PASSWORD" stagesol < /dump/api__account.sql'


# Run docker-compose
echo -e "\e[33mRun docker-compose\e[0m"
docker-compose stop && docker-compose rm -f && docker-compose build && docker-compose up -d && docker-compose ps
source "/env/shell/common.sh"
#check_container --container "db" --port 3306 --timeout 20
check_container --container "php" --port 9000 --timeout 20
check_container --container "lamp" --port 80 --timeout 20

#docker rm -f "xdebug_php" &> /dev/null; \
#LINK_CONTAINER_ID=$(docker-compose ps -q "php"); \
#docker run \
#    --name "xdebug_php" \
#    --link "$(docker inspect --format="{{.Name}}" "${LINK_CONTAINER_ID}")" \
#    --volumes-from ${LINK_CONTAINER_ID} \
#    -d \
#    "$(docker inspect --format="{{.Image}}" "${LINK_CONTAINER_ID}")" \
#    sh -c "pecl install xdebug; XDEBUG_PATH=$(find / -name 'xdebug.so' 2> /dev/null); zend_extension="${XDEBUG_PATH}" > /usr/local/etc/php/conf.d/xdebug.ini; php-fpm"; \
#\
#docker rm -f "xdebug_lamp" &> /dev/null; \
#LINK_CONTAINER_ID=$(docker-compose ps -q "lamp"); \
#docker exec "${LINK_CONTAINER_ID}" /bin/bash -c 'ls -hal /usr/sbin/'; \
#docker run \
#    --name "xdebug_lamp" \
#    --link "$(docker inspect --format="{{.Name}}" "${LINK_CONTAINER_ID}")" \
#    --volumes-from ${LINK_CONTAINER_ID} \
#    -p 8081:80 \
#    -d \
#    "$(docker inspect --format="{{.Image}}" "${LINK_CONTAINER_ID}")"; \
#    ls -hal /usr/sbin/
#    "$(docker inspect --format="{{index .Config.Entrypoint 0}}" "${LINK_CONTAINER_ID}")" "-D" \
#docker ps
#
##docker cp ${LINK_CONTAINER_ID}:/usr/sbin/apache2 ./tmp/usr/sbin/apache2; \
##docker cp ./tmp/usr/sbin/apache2 "xdebug_lamp":/usr/sbin/apache2 ;\
#docker exec -ti "stagesol_lamp_1" /bin/bash -c 'cd ~; exec "${SHELL:-sh}"'



# Install phpunit, phpcs, phpdoc and composer
RUN apt-get install -y git \
    && curl -o /usr/bin/phpunit https://phar.phpunit.de/phpunit.phar \
    && curl -o /usr/bin/phpcs https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar \
    && curl -o /usr/bin/phpcbf https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar \
    && curl -o /usr/bin/phpdoc http://phpdoc.org/phpDocumentor.phar \
    && curl -o /usr/bin/composer https://getcomposer.org/composer.phar \
    && chmod +x /usr/bin/phpunit /usr/bin/phpcs /usr/bin/phpcbf /usr/bin/composer /usr/bin/phpdoc


zend_extension = "/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so"
xdebug.remote_enable = 1
xdebug.remote_log = "/log/xdebug.log"
xdebug.remote_host = 127.0.0.1
xdebug.remote_port = 10000
xdebug.profiler_enable=0
xdebug.profiler_enable_trigger=1
xdebug.remote_autostart=0