vagrant:
    api_version: "2"
    host: detect

vm:
    # http://www.vagrantbox.es/
    box: "ubuntu64" # TODO trusty64
    box_url: "https://cloud-images.ubuntu.com/vagrant/precise/current/precise-server-cloudimg-amd64-vagrant-disk1.box"
    hostname: null
    usable_port_range: 2200..2500
    network:
        private_network: 192.168.100.100 # TODO use this ip address in php code dynamically
        forwarded_ports:
            # ssh is set by default - overwriting this can lead to unexpected behavior
            #ssh:
            #    host: 2222
            #    guest: 22
            http_8080:
                host: 8080
                guest: 80
            http_8000:
                host: 8000
                guest: 8000
            ssh_8433:
                host: 8433
                guest: 433
    provider:
        virtualbox:
            memory: 2048
            cpus: 2 # 1
            modifyvm:
                name: devmachine
                # natdnsproxy1: on
                natdnshostresolver1: on
                # rtcuseutc: on # bugfix ssh connection - https://github.com/mitchellh/vagrant/issues/391
                memory: '2048'
            gui: false
            setextradata:
                VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root: 1 # enable symlinks for windows
            check_guest_additions: false
            functional_vboxsf: false
    provision:
        startpath:
            type: shell
            inline: echo -e "\e[93mPrepare virtual machine\e[0m" && grep -q -F "cd /env" "/home/vagrant/.bashrc" || echo -e "\ncd /env" >> "/home/vagrant/.bashrc"
            keep_color: true
        install_ansible:
            type: shell
            inline: echo -e "\e[93mCheck ansible install\e[0m" && if [ $(dpkg-query -W -f='${Status}' ansible 2>/dev/null | grep -c "ok installed") -eq 0 ]; then export DEBIAN_FRONTEND=noninteractive && apt-get install -qq software-properties-common && apt-add-repository ppa:ansible/ansible && apt-get update -qq && apt-get install -qq ansible; fi && sudo mkdir -p /usr/share/ansible_plugins/callback_plugins/ && sudo cp /env/ansible/plugins/* /usr/share/ansible_plugins/callback_plugins/
            keep_color: true
        run_ansible:
            type: shell
            inline: echo -e "\e[93mRun ansible playbook\e[0m" && cd /env && echo "localhost ansible_connection=local" > /etc/ansible/local-hosts && export PYTHONUNBUFFERED=1 && export ANSIBLE_FORCE_COLOR=1 && ansible-playbook -i /etc/ansible/local-hosts playbook.yml --connection=local --extra-vars "timezone=Europe/Brussels locale=en_US.UTF-8 docker_version=1.6.0 docker_compose_version=1.3.1"
            keep_color: true
#        install_dos2unix:
#            type: shell
#            windows_only: true
#            inline: 'echo -e "\e[93mCheck dos2unix install\e[0m" && if ! which dos2unix &> /dev/null; then apt-get install -y dos2unix; fi'
#            keep_color: true
#        run_dos2unix:
#            type: shell
#            windows_only: true
#            inline: 'find /env/shell/* -name "*.sh" -exec echo -e "\e[93mConvert shell script \"{}\" (dos to unix)\e[0m" \; -exec dos2unix --keepdate --quiet {} \; && find /env/workspace/* -not -path */vendor/* -name "provision-docker-compose.sh" -exec echo -e "\e[93mConvert shell script \"{}\" (dos to unix)\e[0m" \; -exec dos2unix --keepdate --quiet {} \;'
#            keep_color: true
        project_provision:
            type: shell
            inline: 'find "/env/workspace" -iname "provision-docker-compose.sh" -exec echo -e "\e[93mRun shell script \"{}\"\e[0m" \; -exec bash "{}" \; -exec echo " " \;'
            keep_color: true
#        run_unix2dos:
#            type: shell
#            windows_only: true
#            inline: 'find /env/shell/* -name "*.sh" -exec echo -e "\e[93mConvert shell script \"{}\" (unix to dos)\e[0m" \; -exec unix2dos --keepdate --quiet {} \; && find /env/workspace/* -not -path */vendor/* -name "provision-docker-compose.sh" -exec echo -e "\e[93mConvert shell script \"{}\" (unix to dos)\e[0m" \; -exec unix2dos --keepdate --quiet {} \;'
#            keep_color: true
    synced_folder:
        # TODO http://jeremykendall.net/2013/08/09/vagrant-synced-folders-permissions/
        # TODO http://www.sebastien-han.fr/blog/2012/12/18/noac-performance-impact-on-web-applications/
        # Having the /env folder with the same group setting as that
        # of the apache2 process' group ensures that Apache2 can access and modify
        # files under it, without explicitly chmod-ing them to 777
        # This only works for the default provider
        # - With nfs we cannot set the group for the directory,
        # and php5-fpm will probably not be able to read the files.
        # - With rsync two-way sync is not possible
        environment:
            source: ./
            target: /env
#            owner: vagrant
#            group: www-data
            type: nfs

ssh:
    host: null
    port: null
    private_key_path: null
    username: vagrant # TODO https://github.com/Varying-Vagrant-Vagrants/VVV/issues/375
    guest_port: null
    keep_alive: true
    forward_agent: false # TODO true http://wildlyinaccurate.com/using-ssh-agent-forwarding-with-vagrant/
    forward_x11: false
    shell: "bash -c 'BASH_ENV=/etc/profile exec bash'" # default: "bash -l", but this resolves the stdin error