



# Load dependencies
require_relative 'vagrant/plugins/vagrant_rancheros_guest_plugin.rb'



# CLOUD_CONFIG_PATH = File.join(File.dirname(__FILE__), "user-data")
# CONFIG = File.join(File.dirname(__FILE__), "config.rb")
#
# if File.exist?(CONFIG)
#   require CONFIG
# end
#
# if File.exist?(CLOUD_CONFIG_PATH)
#     config.vm.provision :file, :source => "#{CLOUD_CONFIG_PATH}", :destination => "/tmp/vagrantfile-user-data"
#     config.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
# end


if !$yaml_config['workspace'].nil?
    $yaml_config['workspace'].each do |workspace_name, workspace_config|
        if $yaml_config['vm']['provision']["workspace:#{workspace_name}"].nil?
            $yaml_config['vm']['provision']["workspace:#{workspace_name}"] = {}
        end
        $yaml_config['vm']['provision']["workspace:#{workspace_name}"] = add_defaults(
            $yaml_config['workspace']["#{workspace_name}"],
            $yaml_config['vm']['provision']["workspace:#{workspace_name}"]
        )
    end
    $yaml_config['devmachine'].delete('workspace')
end
# Dir.glob('./workspace/*').select {|f| File.directory? f}.each do |file|
#     if File.exist?("#{file}/devmachine.yml")
#         workspace_name = File.basename(file)
#         if $yaml_config['vm']['provision']["workspace:#{workspace_name}"].nil?
#             $yaml_config['vm']['provision']["workspace:#{workspace_name}"] = {}
#         end
#         $yaml_config['vm']['provision']["workspace:#{workspace_name}"] = add_defaults(
#             $yaml_config['vm']['provision']["workspace:#{workspace_name}"],
#             add_defaults(
#                 YAML.load_file("#{file}/devmachine.yml"),
#                 {
#                     "type"=>"shell",
#                     "directory"=>"workspace/#{workspace_name}",
#                     "keep_color"=>true
#                 }
#             )
#         )
#     end
# end

# Build configuration
Vagrant.configure($yaml_config['vagrant']['api_version']) do |config|

    (1..$yaml_config['devmachine']['nodes']).each do |i|
        hostname = "rancher-%02d" % i # TODO rename to node-

        config.vm.define hostname do |node|


            # DELETED

#             # Add provision "bashrc": add default login location
#             bashrc = $yaml_config['devmachine']['bashrc']
#             bashrc = "cd /opt/devmachine"
#             node.vm.provision "bashrc", type: "shell", keep_color: true, run: "always", inline: %~
#                 touch \~/.bash_profile
#                 (grep -q -F "#{bashrc}" "\~/.bash_profile" || echo -e "\n#{bashrc}" >> "\~/.bash_profile")
#             ~

#             # Add provision "system": install ansible and run playbook
#             ansible_version = $yaml_config['devmachine']['ansible']['version']
#             ansible_playbook = $yaml_config['devmachine']['ansible']['playbook']
#             ansible_extra_vars = $yaml_config['devmachine']['ansible']['extra_vars'].map { |key, value| [key.to_sym, '\"' + value + '\"'] * "=" } * " "
#             node.vm.provision "system", type: "shell", keep_color: true, run: "always", inline: %~
#                 if ! which pip &> /dev/null; then
#                     echo -e "\e[93mInstall pip\e[0m"
#                     export DEBIAN_FRONTEND=noninteractive
#                     apt-get -y update
#                     apt-get -y install python-pip python-dev build-essential
#                     pip install --upgrade pip
#                     pip install --upgrade distribute
#                     hash -r
#                 fi
#                 if test -z "$(pip list | grep "ansible" | grep "#{ansible_version}")"; then
#                     echo -e "\e[93mInstall ansible\e[0m"
#                     pip install ansible==#{ansible_version}
#                 fi
#                 sudo mkdir -p /etc/ansible/ /usr/share/ansible_plugins/callback_plugins/
#                 sudo cp /env/ansible/plugins/* /usr/share/ansible_plugins/callback_plugins/
#                 echo "localhost ansible_connection=local" > /etc/ansible/local-hosts
#
#                 PLAYBOOK_DIRECTORY=$(dirname "#{ansible_playbook}")
#                 PLAYBOOK_FILENAME=$(basename "#{ansible_playbook}")
#                 echo -e "\e[93mRun ansible playbook \"#{ansible_playbook}\" \e[0m"
#                 cd "${PLAYBOOK_DIRECTORY}"
#                 export PYTHONUNBUFFERED=1
#                 export ANSIBLE_INVENTORY=/etc/ansible/local-hosts
#                 export ANSIBLE_FORCE_COLOR=1
#                 ansible-playbook "${PLAYBOOK_FILENAME}" --connection=local --extra-vars "#{ansible_extra_vars}"
#             ~

#             # Add provision "cleanup": add shell script to cleanup docker containers
#             node.vm.provision "cleanup", type: "shell", keep_color: true, run: "always", path: "./shell/cleanup-docker.sh"

#             # Add once to run provision
#             ARGV.each_with_index do |argument, index|
#                 if "--provision-with" == argument
#                     provision_with_array = ARGV[index+1].split(',')
#                     provision_with_array.each do |provision_with|
#                         if provision_with.include?(':') && !provision_with.start_with?('workspace:')
#                             provision_with_arguments = provision_with.split(':')
#
#                             # Initialize variables
#                             inline = "cd \"/env\""
#                             dos2unix = []
#
#                             while provision_with_arguments.any? do
#                                 # Get type
#                                 type = provision_with_arguments.first
#                                 provision_with_arguments = provision_with_arguments.drop(1)
#
#                                 # Run docker-compose
#                                 if "docker-compose" == type || "compose" == type
#                                     inline += %~
#                                         echo -e "\e[93mRun docker-compose\e[0m"
#                                     ~
#                                     container = provision_with_arguments.at(0)
#                                     entrypoint = !provision_with_arguments.at(1).empty? ? provision_with_arguments.at(1) : "/bin/bash"
#                                     command = provision_with_arguments.drop(2).join(':')
#                                     provision_with_arguments = []
#                                     inline += %~
#                                         echo -e "container: \\\"#{container}\\\", entrypoint: \\\"#{entrypoint}\\\", command: \\\"#{command}\\\""
#                                         docker-compose run --rm --entrypoint "#{entrypoint}" "#{container}" -c "#{command}"
#                                     ~
#
#                                 # Run ansible-playbook
#                                 elsif "ansible-playbook" == type || "playbook" == type
#                                     playbook = !provision_with_arguments.at(0).nil? ? provision_with_arguments.at(0) : "playbook.yml"
#                                     provision_with_arguments = provision_with_arguments.drop(1)
#                                     inline += %~
#                                         echo -e "\e[93mRun ansible-playbook\e[0m"
#                                         export PYTHONUNBUFFERED=1
#                                         export ANSIBLE_INVENTORY=/etc/ansible/local-hosts
#                                         export ANSIBLE_FORCE_COLOR=1
#                                         echo "playbook: \\\"#{playbook}\\\""
#                                         ansible-playbook "#{playbook}" --connection=local
#                                     ~
#
#                                 # Run bash with dos2unix
#                                 elsif "#{$yaml_config['devmachine']['shell']}" == type || "script" == type
#                                     command = provision_with_arguments.at(0)
#                                     provision_with_arguments = provision_with_arguments.drop(1)
#                                     inline += %~
#                                         echo -e "\e[93mRun command (dos2unix)\e[0m"
#                                         echo "command: \\\"#{$yaml_config['devmachine']['shell']} \\\"#{command}\\\"\\\""
#                                         #{$yaml_config['devmachine']['shell']} "#{command}"
#                                     ~
#                                     dos2unix.push("echo \\\"#{command}\\\"")
#
#                                 # Run command
#                                 elsif "run" == type || "command" == type
#                                     command = provision_with_arguments.at(0)
#                                     provision_with_arguments = provision_with_arguments.drop(1)
#                                     inline += %~
#                                         echo -e "\e[93mRun command\e[0m"
#                                         echo "command: \\\"#{command}\\\""
#                                         #{command}
#                                     ~
#
#                                 # Run anything
#                                 else
#                                     command = provision_with_arguments.at(0)
#                                     provision_with_arguments = provision_with_arguments.drop(1)
#                                     inline += %~
#                                         echo -e "\e[93mRun command\e[0m"
#                                         echo "command: \\\"#{type} #{command}\\\""
#                                         #{type} #{command}
#                                     ~
#
#                                 end
#
#                             end
#
#                             # Add once to run provision
#                             $yaml_config['vm']['provision'][provision_with] = {
#                                 "type"=>"shell",
#                                 "keep_color"=>true,
#                                 "inline"=>inline,
#                                 "dos2unix"=>dos2unix
#                             }
#                         end
#                     end
#                     break
#                 end
#             end

#             # Add provision "report": report versions of installed programs
#             $yaml_config['vm']['provision']['report'] = {
#                 "type"=>"shell",
#                 "path"=>"./shell/report.sh",
#                 "keep_color"=>true,
#                 "run"=>"always"
#             }

            # DELETED vm configuration

            # Disabling compression because OS X has an ancient version of rsync installed.
            # Add -z or remove rsync__args below if you have a newer version of rsync on your machine.
            node.vm.synced_folder ".", "/opt/devmachine", type: "rsync",
                rsync__exclude: [".git/", ".gitignore", ".vagrant/", "Vagrantfile", "vagrant", "todo", "workspace"],
                rsync__args: ["--verbose", "--archive", "--delete", "--copy-links"],
                rsync__auto: true,
                rsync__verbose: true,
                disabled: false

            node.vm.provision "shell", inline: %~
                # Exit on error
                set -e

                # Download docker-compose
                mkdir -p /opt/bin/
                DOCKER_COMPOSE_FILENAME="docker-compose-`uname -s`-`uname -m`"
                DOCKER_COMPOSE_VERSION="1.6.0"
                DOCKER_COMPOSE_PATH="/opt/bin/docker-compose/${DOCKER_COMPOSE_VERSION}/docker-compose"
                if test ! -f ${DOCKER_COMPOSE_PATH}; then
                    mkdir -p "$(dirname "${DOCKER_COMPOSE_PATH}")"
                    wget -O ${DOCKER_COMPOSE_PATH} https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/${DOCKER_COMPOSE_FILENAME}
                fi
                chmod +x ${DOCKER_COMPOSE_PATH}
                sudo ln -sfn /${DOCKER_COMPOSE_PATH} /usr/bin/docker-compose

                # Run docker-compose
#                 echo -e "\e[33mRun docker-compose\e[0m"
#                 cd "/opt/devmachine/gui"
#                 docker-compose stop && docker-compose rm -f && docker-compose build && docker-compose up -d

                # Logs
                docker --version
                docker-compose --version
                docker-compose ps
            ~

#             if Vagrant.has_plugin?("vagrant-triggers") then
#                 config.trigger.after [:up, :resume] do
#                     info "Adjusting datetime after suspend and resume."
#                     run_remote "sudo sntp -4sSc pool.ntp.org; date"
#                 end
#             end
#
#             if Vagrant.has_plugin?("vagrant-triggers") then
#                 config.trigger.after [:up, :resume] do
#                     info "Adjusting datetime after suspend and resume."
#                     run_remote <<-EOT.prepend("\n")
#                         sudo system-docker stop ntp
#                         sudo ntpd -n -q -g -I eth0 > /dev/null
#                         date
#                         sudo system-docker start ntp
#                     EOT
#                 end
#             end
#
#             # Adjusting datetime before provisioning.
#             config.vm.provision :shell, run: "always" do |sh|
#                 sh.inline = <<-EOT
#                     system-docker stop ntp
#                     ntpd -n -q -g -I eth0 > /dev/null
#                     date
#                     system-docker start ntp
#                 EOT
#             end
#
#             config.vm.provision :docker do |d|
#                 d.pull_images "busybox"
#                 d.run "simple-echo",
#                     image: "busybox",
#                     args: "-p 8080:8080",
#                     cmd: "nc -p 8080 -l -l -e echo hello world!"
#             end
#
#             config.vm.network :forwarded_port, guest: 8080, host: 8080


        end
    end
end

# if (['provision', 'reload', 'resume', 'up'].include? ARGV[0])
#     rsync = fork do
#         exec "vagrant rsync-auto"
#     end
#     Process.detach(rsync)
# end


